# Generated by Django 4.0.4 on 2022-05-31 05:46

from django.db import migrations, models
import django.utils.timezone
import project.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.AutoField(db_column='account_no', primary_key=True, serialize=False, verbose_name='account_no')),
                ('first_name', models.CharField(max_length=60, verbose_name='first_name')),
                ('last_name', models.CharField(max_length=60, verbose_name='last_name')),
                ('pin', models.IntegerField(verbose_name='pin')),
                ('card_no', models.CharField(max_length=20, verbose_name='card_no')),
                ('balance', models.DecimalField(decimal_places=3, max_digits=15, verbose_name='balance')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email_verified', models.BooleanField(default=False, help_text="Designates whether this user's email is verified. ", verbose_name='email verified')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', project.models.CustomUserManager()),
            ],
        ),
    ]
